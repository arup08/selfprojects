
module BOOTH_controller(
    input clk,
    input q0,
    input qm1,
    output reg ldA,
    output reg clrA,
    output reg shftA,
    output reg ldQ,
    output reg clrQ,
    output reg shftQ,
    output reg ldM,
    output reg clrff,
    output reg addsub,
    output reg dec,
    output reg ldcnt,
    output reg done,
    input start
    //input eqz
    );
    reg [2:0] state;
    parameter s0=3'b000,s1=3'b001,s2=3'b010,s3=3'b011,s4=3'b100,s5=3'b101,s6=3'b110;
    always @ (posedge clk)
    begin
    case(state)
    s0: if(start) state<=s1;
    s1: state<=s2;
    s2: if((({q0,qm1})==2'b10)) state<=s4;
    else if((({q0,qm1})==2'b01))state<=s3;
    else state<=s5;
    s3: state<=s5;
    s4: state<=s5;
    s5: if((({q0,qm1})==2'b10) ) state<=s4;
    else if((({q0,qm1})==2'b01))state<=s3;
    //else if(eqz) state<=s6;
    s6: state<=s6;
    default: state<=s0;
    endcase
    end
    always @ (state)
    begin
    case(state)
    s0: begin clrA=0; ldA=0; shftA=0; clrQ=0; ldQ=0; shftQ=0; ldM=0; clrff=0; done=0; end
    s1: begin clrA=1; clrff=1; ldcnt=1; ldM=1;end
    s2: begin clrA=0; clrff=0; ldcnt=0; ldM=0; ldQ=1; end
    s3: begin ldA=1; addsub=1; ldQ=0; shftA=0; shftQ=0; dec=0; end
    s4: begin ldA=1; addsub=0; ldQ=0; shftA=0; shftQ=0; dec=0; end
    s5: begin shftA=1; shftQ=1; ldA=0; ldQ=0; dec=1; end
    s6: done=1;
    default: begin clrA=0; shftA=0; clrQ=0; ldQ=0; shftQ=0; end
    endcase
    end
endmodule
